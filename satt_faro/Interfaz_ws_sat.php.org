<?php

 //error_reporting(E_ALL);

 include ("constantes.inc");
 include ("../".DIR_APLICA_CENTRAL."/lib/generales.inc");

 $server = new soap_server();
 $server -> debug_flag = false;
 $server -> configureWSDL('InterfazAplicaSAT', 'urn:InterfazAplicaSAT');
 $server -> wsdl -> schemaTargetNamespace = $ns;

 //Informacion de la Transportadora

 $tiposEnvInfoTTValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
    "passwo"  => array('name' => "passwo", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("getInfoTTValue",'complexType','struct','all','',$tiposEnvInfoTTValue);

 $tiposEnvInfoTTReturn = array(
        'respon' => array('name' => 'respon', 'type' => 'xsd:string'),
        'menres' => array('name' => 'menres', 'type' => 'xsd:string'),
        'transp' => array('transp' => 'transp', 'type' => 'xsd:string'),
        'nombre' => array('nombre' => 'nombre', 'type' => 'xsd:string'),
        'ciudad' => array('ciudad' => 'ciudad', 'type' => 'xsd:string'),
        'telefo' => array('telefo' => 'telefo', 'type' => 'xsd:string'),
        'emailx' => array('emailx' => 'emailx', 'type' => 'xsd:string'),
        'contac' => array('contac' => 'contac', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envInfoTTReturn','complexType','array','all','',$tiposEnvInfoTTReturn);

 $server -> register("FuncGetInfoTT",
    array("getInfoTTValue" => "tns:getInfoTTValue"),
    array("return"           => "tns:envInfoTTReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envInfoTTReturnwsdl#envInfoTTReturn',
    'rpc',
    'encoded',
    'Funci�n Que Retorna la Informacion de la Transportadora'
                                        );

 function FuncGetInfoTT($schema)
 {
  $resultado = array();

  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client_infoTT($schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> getInfoTT();

   if($resultado)
    return $resultado;
   else
   {
   	$resultado[0] = array("respon" => "FALSE");
   	$resultado[0] = array("menres" => "Error en el Retorno de la Informacion");
    return $resultado;
   }
  }
  else
  {
   $resultado[0] = array("respon" => "FALSE");
   $resultado[0] = array("menres" => "Error de Login");
   return $resultado;
  }
 }

 //Manejo de Estado de la Interfaz

 $tiposEnvEstadoInterfValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
    "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
    "operad"  => array('name' => "operad", 'type' => 'xsd:string'),
    "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
    "nomope"  => array('name' => "nomope", 'type' => 'xsd:string'),
    "usracc"  => array('name' => "usracc", 'type' => 'xsd:string'),
    "pasacc"  => array('name' => "pasacc", 'type' => 'xsd:string'),
    "timtra"  => array('name' => "timtra", 'type' => 'xsd:string'),
    "indope"  => array('name' => "indope", 'type' => 'xsd:string'),
    "indest"  => array('name' => "indest", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("setEstadoInterfValue",'complexType','struct','all','',$tiposEnvEstadoInterfValue);

 $tiposEnvestadoInterfReturn = array(
        'respon' => array('name' => 'respon', 'type' => 'xsd:string'),
        'menres' => array('name' => 'menres', 'type' => 'xsd:string'),
        'confir' => array('transp' => 'confir', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envEstadoInterfReturn','complexType','array','all','',$tiposEnvestadoInterfReturn);

 $server -> register("FuncSetEstadoInterf",
    array("setEstadoInterfValue" => "tns:setEstadoInterfValue"),
    array("return"           => "tns:envInfoTTReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envEstadoInterfReturnwsdl#envEstadoInterfReturn',
    'rpc',
    'encoded',
    'Funcion Que Modifica el Estado de la Interfaz'
                                        );

 function FuncSetEstadoInterf($schema)
 {
  $resultado = array();

  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client_infoTT($schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> setEstadoInterf($schema);

   if($resultado)
    return $resultado;
   else
   {
   	$resultado[0] = array("respon" => "FALSE");
   	$resultado[0] = array("menres" => "Error al Intentar Modificar el Estado de la Interfaz");
    return $resultado;
   }
  }
  else
  {
   $resultado[0] = array("respon" => "FALSE");
   $resultado[0] = array("menres" => "Error de Login");
   return $resultado;
  }
 }

 //Terceros

 $tiposEnvTercerValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
    "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
    "operad"  => array('name' => "operad", 'type' => 'xsd:string'),
    "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
	"tercer"  => array('name' => "tercer", 'type' => 'xsd:string'),
	"numver"  => array('name' => "numver", 'type' => 'xsd:string'),
	"tipdoc"  => array('name' => "tipdoc", 'type' => 'xsd:string'),
	"terreg"  => array('name' => "terreg", 'type' => 'xsd:string'),
	"apell1"  => array('name' => "apell1", 'type' => 'xsd:string'),
	"apell2"  => array('name' => "apell2", 'type' => 'xsd:string'),
	"nombre"  => array('name' => "nombre", 'type' => 'xsd:string'),
	"abrevi"  => array('name' => "abrevi", 'type' => 'xsd:string'),
	"direcc"  => array('name' => "direcc", 'type' => 'xsd:string'),
	"telef1"  => array('name' => "telef1", 'type' => 'xsd:string'),
	"telef2"  => array('name' => "telef2", 'type' => 'xsd:string'),
	"telmov"  => array('name' => "telmov", 'type' => 'xsd:string'),
	"numfax"  => array('name' => "numfax", 'type' => 'xsd:string'),
	"paisxx"  => array('name' => "paisxx", 'type' => 'xsd:string'),
	"depart"  => array('name' => "depart", 'type' => 'xsd:string'),
	"ciudad"  => array('name' => "ciudad", 'type' => 'xsd:string'),
	"emailx"  => array('name' => "emailx", 'type' => 'xsd:string'),
	"urlweb"  => array('name' => "urlweb", 'type' => 'xsd:string'),
	"estado"  => array('name' => "estado", 'type' => 'xsd:string'),
	"observ"  => array('name' => "observ", 'type' => 'xsd:string'),
	"obsapr"  => array('name' => "obsapr", 'type' => 'xsd:string'),
	"tipsex"  => array('name' => "tipsex", 'type' => 'xsd:string'),
	"grupsa"  => array('name' => "grupsa", 'type' => 'xsd:string'),
	"licenc"  => array('name' => "licenc", 'type' => 'xsd:string'),
	"catlic"  => array('name' => "catlic", 'type' => 'xsd:string'),
	"venlic"  => array('name' => "venlic", 'type' => 'xsd:string'),
	"califi"  => array('name' => "califi", 'type' => 'xsd:string'),
	"libtri"  => array('name' => "libtri", 'type' => 'xsd:string'),
	"ventri"  => array('name' => "ventri", 'type' => 'xsd:string'),
	"obshab"  => array('name' => "obshab", 'type' => 'xsd:string'),
	"epsxxx"  => array('name' => "epsxxx", 'type' => 'xsd:string'),
	"arpxxx"  => array('name' => "arpxxx", 'type' => 'xsd:string'),
	"pensio"  => array('name' => "pensio", 'type' => 'xsd:string'),
	"pasado"  => array('name' => "pasado", 'type' => 'xsd:string'),
	"venpas"  => array('name' => "venpas", 'type' => 'xsd:string'),
	"nomref"  => array('name' => "nomref", 'type' => 'xsd:string'),
	"telref"  => array('name' => "telref", 'type' => 'xsd:string'),
	"obscon"  => array('name' => "obscon", 'type' => 'xsd:string'),
	"activi"  => array('name' => "activi", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("envTercerValue",'complexType','struct','all','',$tiposEnvTercerValue);

 $tiposEnvTercerReturn = array(
        'Confirmacion' => array('name' => 'Confirmacion', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envTercerReturn','complexType','struct','all','',$tiposEnvTercerReturn);

 $server -> register("FuncEnvTercerValue",
    array("envTercerValue" => "tns:envTercerValue"),
    array("return"           => "tns:envTercerReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envTercerReturnwsdl#envTercerReturn',
    'rpc',
    'encoded',
    'Funci�n Que Inserta Terceros'
                                        );

 function FuncEnvTercerValue($schema)
 {
  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> envTercer($schema);

   if($resultado)
    return array ("Confirmacion" => "OK");
   else
    return array ("Confirmacion" => "-2");
  }
  else
    return array ("Confirmacion" => "-1");
 }

 //Agencia

 $tiposEnvAgenciValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
	"agenci"  => array('name' => "agenci", 'type' => 'xsd:string'),
	"nombre"  => array('name' => "nombre", 'type' => 'xsd:string'),
	"contac"  => array('name' => "contac", 'type' => 'xsd:string'),
	"ciudad"  => array('name' => "ciudad", 'type' => 'xsd:string'),
	"direcc"  => array('name' => "direcc", 'type' => 'xsd:string'),
	"telefo"  => array('name' => "telefo", 'type' => 'xsd:string'),
	"correo"  => array('name' => "correo", 'type' => 'xsd:string'),
	"numfax"  => array('name' => "numfax", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("envAgenciValue",'complexType','struct','all','',$tiposEnvAgenciValue);

 $tiposEnvAgenciReturn = array(
        'Confirmacion' => array('name' => 'Confirmacion', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envAgenciReturn','complexType','struct','all','',$tiposEnvAgenciReturn);

 $server -> register("FuncEnvAgenciValue",
    array("envAgenciValue" => "tns:envAgenciValue"),
    array("return"           => "tns:envAgenciReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envAgenciReturnwsdl#envAgenciReturn',
    'rpc',
    'encoded',
    'Funci�n Que Inserta la Agencia'
                                        );

 function FuncEnvAgenciValue($schema)
 {
  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> envAgenci($schema);

   if($resultado)
    return array ("Confirmacion" => "OK");
   else
    return array ("Confirmacion" => "-2");
  }
  else
    return array ("Confirmacion" => "-1");
 }

 //Vehiculo

 $tiposEnvVehicuValue = array(
		"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
     	"passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
		"placax"  => array('name' => "placax", 'type' => 'xsd:string'),
        "marcax"  => array('name' => "marcax", 'type' => 'xsd:string'),
        "lineax"  => array('name' => "lineax", 'type' => 'xsd:string'),
        "anomod"  => array('name' => "anomod", 'type' => 'xsd:string'),
        "colorx"  => array('name' => "colorx", 'type' => 'xsd:string'),
        "carroc"  => array('name' => "carroc", 'type' => 'xsd:string'),
        "motorx"  => array('name' => "motorx", 'type' => 'xsd:string'),
        "seriex"  => array('name' => "seriex", 'type' => 'xsd:string'),
        "chasis"  => array('name' => "chasis", 'type' => 'xsd:string'),
        "pesove"  => array('name' => "pesove", 'type' => 'xsd:string'),
        "capaci"  => array('name' => "capaci", 'type' => 'xsd:string'),
        "nalcar"  => array('name' => "nalcar", 'type' => 'xsd:string'),
        "vigfin"  => array('name' => "vigfin", 'type' => 'xsd:string'),
        "anorep"  => array('name' => "anorep", 'type' => 'xsd:string'),
        "config"  => array('name' => "config", 'type' => 'xsd:string'),
        "propie"  => array('name' => "propie", 'type' => 'xsd:string'),
        "poseed"  => array('name' => "poseed", 'type' => 'xsd:string'),
        "conduc"  => array('name' => "conduc", 'type' => 'xsd:string'),
        "vincul"  => array('name' => "vincul", 'type' => 'xsd:string'),
        "tarpro"  => array('name' => "tarpro", 'type' => 'xsd:string'),
        "tarope"  => array('name' => "tarope", 'type' => 'xsd:string'),
        "califi"  => array('name' => "califi", 'type' => 'xsd:string'),
        "vigvin"  => array('name' => "vigvin", 'type' => 'xsd:string'),
        "polirc"  => array('name' => "polirc", 'type' => 'xsd:string'),
        "venprc"  => array('name' => "venprc", 'type' => 'xsd:string'),
        "aseprc"  => array('name' => "aseprc", 'type' => 'xsd:string'),
        "tipveh"  => array('name' => "tipveh", 'type' => 'xsd:string'),
        "chelis"  => array('name' => "chelis", 'type' => 'xsd:string'),
        "revmec"  => array('name' => "revmec", 'type' => 'xsd:string'),
        "agases"  => array('name' => "agases", 'type' => 'xsd:string'),
        "vengas"  => array('name' => "vengas", 'type' => 'xsd:string'),
        "observ"  => array('name' => "observ", 'type' => 'xsd:string'),
        "estado"  => array('name' => "estado", 'type' => 'xsd:string'),
        "obsest"  => array('name' => "obsest", 'type' => 'xsd:string'),
        "trayle"  => array('name' => "trayle", 'type' => 'xsd:string'),
        "tramar"  => array('name' => "tramar", 'type' => 'xsd:string'),
        "tracol"  => array('name' => "tracol", 'type' => 'xsd:string'),
        "tracar"  => array('name' => "tracar", 'type' => 'xsd:string'),
        "tramod"  => array('name' => "tramod", 'type' => 'xsd:string'),
        "traeje"  => array('name' => "traeje", 'type' => 'xsd:string'),
        "tracha"  => array('name' => "tracha", 'type' => 'xsd:string'),
        "traanc"  => array('name' => "traanc", 'type' => 'xsd:string'),
        "traalt"  => array('name' => "traalt", 'type' => 'xsd:string'),
        "tralar"  => array('name' => "tralar", 'type' => 'xsd:string'),
        "travol"  => array('name' => "travol", 'type' => 'xsd:string'),
        "trapes"  => array('name' => "trapes", 'type' => 'xsd:string'),
        "tracap"  => array('name' => "tracap", 'type' => 'xsd:string'),
        "tratra"  => array('name' => "tratra", 'type' => 'xsd:string'),
        "trapro"  => array('name' => "trapro", 'type' => 'xsd:string'),
        "tracfg"  => array('name' => "tracfg", 'type' => 'xsd:string'),
        "traest"  => array('name' => "traest", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("envVehicuValue",'complexType','struct','all','',$tiposEnvVehicuValue);

 $tiposEnvVehicuReturn = array(
        'Confirmacion' => array('name' => 'Confirmacion', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envVehicuReturn','complexType','struct','all','',$tiposEnvVehicuReturn);

 $server -> register("FuncEnvVehicuValue",
    array("envVehicuValue" => "tns:envVehicuValue"),
    array("return"           => "tns:envVehicuReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envVehicuReturnwsdl#envVehicuReturn',
    'rpc',
    'encoded',
    'Funci�n Que Inserta el Vehiculo'
                                        );

 function FuncEnvVehicuValue($schema)
 {
  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> envVehicu($schema);

   if($resultado)
    return array ("Confirmacion" => "OK");
   else
    return array ("Confirmacion" => "-2");
  }
  else
    return array ("Confirmacion" => "-1");
 }

 //Salida del Despacho

 $tiposEnvDespacValue = array(
		"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
		"despac"  => array('name' => "despac", 'type' => 'xsd:string'),
		"manifi"  => array('name' => "manifi", 'type' => 'xsd:string'),
		"fecdes"  => array('name' => "fecdes", 'type' => 'xsd:string'),
		"tipdes"  => array('name' => "tipdes", 'type' => 'xsd:string'),
		"client"  => array('name' => "client", 'type' => 'xsd:string'),
		"ciuori"  => array('name' => "ciuori", 'type' => 'xsd:string'),
		"ciudes"  => array('name' => "ciudes", 'type' => 'xsd:string'),
		"valfle"  => array('name' => "valfle", 'type' => 'xsd:string'),
		"valdes"  => array('name' => "valdes", 'type' => 'xsd:string'),
		"valant"  => array('name' => "valant", 'type' => 'xsd:string'),
		"valret"  => array('name' => "valret", 'type' => 'xsd:string'),
		"carpag"  => array('name' => "carpag", 'type' => 'xsd:string'),
		"despag"  => array('name' => "despag", 'type' => 'xsd:string'),
		"agedes"  => array('name' => "agedes", 'type' => 'xsd:string'),
		"fecpag"  => array('name' => "fecpag", 'type' => 'xsd:string'),
		"observ"  => array('name' => "observ", 'type' => 'xsd:string'),
		"salida"  => array('name' => "salida", 'type' => 'xsd:string'),
		"obssal"  => array('name' => "obssal", 'type' => 'xsd:string'),
		"valdec"  => array('name' => "valdec", 'type' => 'xsd:string'),
		"numpol"  => array('name' => "numpol", 'type' => 'xsd:string'),
		"pesoxx"  => array('name' => "pesoxx", 'type' => 'xsd:string'),
		"agenci"  => array('name' => "agenci", 'type' => 'xsd:string'),
		"rutasx"  => array('name' => "rutasx", 'type' => 'xsd:string'),
		"conduc"  => array('name' => "conduc", 'type' => 'xsd:string'),
		"placax"  => array('name' => "placax", 'type' => 'xsd:string'),
		"trayle"  => array('name' => "trayle", 'type' => 'xsd:string'),
		"proesp"  => array('name' => "proesp", 'type' => 'xsd:string'),
		"medcom"  => array('name' => "medcom", 'type' => 'xsd:string'),
		"salipl"  => array('name' => "salipl", 'type' => 'xsd:string'),
		"obsanu"  => array('name' => "obsanu", 'type' => 'xsd:string'),
        "planru"  => array('name' => "planru", 'type' => 'xsd:string'),
        "precon"  => array('name' => "precon", 'type' => 'xsd:string'),
        "prenov"  => array('name' => "prenov", 'type' => 'xsd:string'),
        "pretie"  => array('name' => "pretie", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("envDespacValue",'complexType','struct','all','',$tiposEnvDespacValue);

 $tiposEnvDespacReturn = array(
        'Confirmacion' => array('name' => 'Confirmacion', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envDespacReturn','complexType','struct','all','',$tiposEnvDespacReturn);

 $server -> register("FuncEnvDespacValue",
    array("envDespacValue" => "tns:envDespacValue"),
    array("return"           => "tns:envDespacReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envDespacReturnwsdl#envDespacReturn',
    'rpc',
    'encoded',
    'Funci�n Que Inserta la Salida del Despacho'
                                        );

 function FuncEnvDespacValue($schema)
 {
  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> envDespacSalida($schema);

   if($resultado > 0)
    return array ("Confirmacion" => $resultado);
   else
    return array ("Confirmacion" => "-2");
  }
  else
    return array ("Confirmacion" => "-1");
 }

 //Plan de Ruta

 $tiposEnvPlanruValue = array(
    "usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
    "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
    "operad"  => array('name' => "operad", 'type' => 'xsd:string'),
    "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
    "despac"  => array('name' => "despac", 'type' => 'xsd:string'),
    "salida"  => array('name' => "salida", 'type' => 'xsd:string'),
    "planru"  => array('name' => "planru", 'type' => 'xsd:string'),
    "prenov"  => array('name' => "prenov", 'type' => 'xsd:string'),
    "pretie"  => array('name' => "pretie", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("envPlanruValue",'complexType','struct','all','',$tiposEnvPlanruValue);

 $tiposEnvPlanruReturn = array(
        'Confirmacion' => array('name' => 'Confirmacion', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envPlanruReturn','complexType','struct','all','',$tiposEnvPlanruReturn);

 $server -> register("FuncEnvPlanruValue",
    array("envPlanruValue" => "tns:envPlanruValue"),
    array("return"           => "tns:envPlanruReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envPlanruReturnwsdl#envPlanruReturn',
    'rpc',
    'encoded',
    'Funci�n Que Inserta el Plan de Ruta'
                                        );

 function FuncEnvPlanruValue($schema)
 {
  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["operad"],$schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> envDespacPlanru($schema);

   if($resultado)
    return array ("Confirmacion" => "OK");
   else
    return array ("Confirmacion" => "FALSE");
  }
  else
    return array ("Confirmacion" => "ERROR DE LOGIN");
 }

 //Llegada del Despacho

 $tiposEnvLlegadValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
	"despac"  => array('name' => "despac", 'type' => 'xsd:string'),
	"fechax"  => array('name' => "fechax", 'type' => 'xsd:string'),
	"observ"  => array('name' => "observ", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("envLlegadValue",'complexType','struct','all','',$tiposEnvLlegadValue);

 $tiposEnvLlegadReturn = array(
        'Confirmacion' => array('name' => 'Confirmacion', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envLlegadReturn','complexType','struct','all','',$tiposEnvLlegadReturn);

 $server -> register("FuncEnvLlegadValue",
    array("envLlegadValue" => "tns:envLlegadValue"),
    array("return"           => "tns:envLlegadReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envLlegadReturnwsdl#envLlegadReturn',
    'rpc',
    'encoded',
    'Funci�n Que Inserta la Llegada del Despacho'
                                        );

 function FuncEnvLlegadValue($schema)
 {
  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> envDespacLlegad($schema);

   if($resultado == "")
    return array ("Confirmacion" => "OK");
   else
    return array ("Confirmacion" => "-2");
  }
  else
    return array ("Confirmacion" => "-1");
 }

 //Novedades P/C

 $tiposEnvNovePCValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
	"despac"  => array('name' => "despac", 'type' => 'xsd:string'),
	"contro"  => array('name' => "contro", 'type' => 'xsd:string'),
	"noveda"  => array('name' => "noveda", 'type' => 'xsd:string'),
	"duraci"  => array('name' => "duraci", 'type' => 'xsd:string'),
	"fechax"  => array('name' => "fechax", 'type' => 'xsd:string'),
	"observ"  => array('name' => "observ", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("envNovePCValue",'complexType','struct','all','',$tiposEnvNovePCValue);

 $tiposEnvNovePCReturn = array(
        'Confirmacion' => array('name' => 'Confirmacion', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envNovePCReturn','complexType','struct','all','',$tiposEnvNovePCReturn);

 $server -> register("FuncEnvNovePCValue",
    array("envNovePCValue" => "tns:envNovePCValue"),
    array("return"           => "tns:envNovePCReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envNovePCReturnwsdl#envNovePCReturn',
    'rpc',
    'encoded',
    'Funci�n Que Inserta Novedades P/C'
                                        );

 function FuncEnvNovePCValue($schema)
 {
  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> envDespacNovePC($schema);

   if($resultado == "")
    return array ("Confirmacion" => "OK");
   else
    return array ("Confirmacion" => "-2");
  }
  else
    return array ("Confirmacion" => "-1");
 }

 //Novedades N/C

 $tiposEnvNoveNCValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
	"despac"  => array('name' => "despac", 'type' => 'xsd:string'),
	"contro"  => array('name' => "contro", 'type' => 'xsd:string'),
	"noveda"  => array('name' => "noveda", 'type' => 'xsd:string'),
	"duraci"  => array('name' => "duraci", 'type' => 'xsd:string'),
	"fechax"  => array('name' => "fechax", 'type' => 'xsd:string'),
	"observ"  => array('name' => "observ", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("envNoveNCValue",'complexType','struct','all','',$tiposEnvNoveNCValue);

 $tiposEnvNoveNCReturn = array(
        'Confirmacion' => array('name' => 'Confirmacion', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envNoveNCReturn','complexType','struct','all','',$tiposEnvNoveNCReturn);

 $server -> register("FuncEnvNoveNCValue",
    array("envNoveNCValue" => "tns:envNoveNCValue"),
    array("return"         => "tns:envNoveNCReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envNoveNCReturnwsdl#envNoveNCReturn',
    'rpc',
    'encoded',
    'Funci�n Que Inserta Novedades N/C'
                                        );

 function FuncEnvNoveNCValue($schema)
 {
  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> envDespacNoveNC($schema);

   if($resultado == "")
    return array ("Confirmacion" => "OK");
   else
    return array ("Confirmacion" => "-2");
  }
  else
    return array ("Confirmacion" => "-1");
 }

 //Anular/Reversiones

 $tiposEnvAnularValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
	"despac"  => array('name' => "despac", 'type' => 'xsd:string'),
	"fechax"  => array('name' => "fechax", 'type' => 'xsd:string'),
	"observ"  => array('name' => "observ", 'type' => 'xsd:string'),
	"tipoan"  => array('name' => "tipoan", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("envAnularValue",'complexType','struct','all','',$tiposEnvAnularValue);

 $tiposEnvAnularReturn = array(
        'Confirmacion' => array('name' => 'Confirmacion', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('envAnularReturn','complexType','struct','all','',$tiposEnvAnularReturn);

 $server -> register("FuncEnvAnularValue",
    array("envAnularValue" => "tns:envAnularValue"),
    array("return"           => "tns:envAnularReturn"),
    'urn:InterfazAplicaSAT',
    'urn:envAnularReturnwsdl#envAnularReturn',
    'rpc',
    'encoded',
    'Funci�n Que Inserta la Anulacion/Reversion'
                                        );

 function FuncEnvAnularValue($schema)
 {
  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> envDespacAnular($schema);

   if($resultado == "")
    return array ("Confirmacion" => "OK");
   else
    return array ("Confirmacion" => "-2");
  }
  else
    return array ("Confirmacion" => "-1");
 }

 //Relacion Plan de Ruta

 $tiposRetPlanruValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
	"rutasx"  => array('name' => "rutasx", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("retPlanruValue",'complexType','struct','all','',$tiposRetPlanruValue);

 $tiposRetPlanruReturn = array(
        'contro' => array('name' => 'contro', 'type' => 'xsd:string'),
        'nombre' => array('name' => 'nombre', 'type' => 'xsd:string'),
	'tiempo' => array('name' => 'tiempo', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('retPlanruReturn','complexType','array','all','',$tiposRetPlanruReturn);

 $server -> register("FuncRetPlanruValue",
    array("retPlanruValue" => "tns:retPlanruValue"),
    array("return"           => "tns:retPlanruReturn"),
    'urn:InterfazAplicaSAT',
    'urn:retPlanruReturnwsdl#retPlanruReturn',
    'rpc',
    'encoded',
    'Funci�n Que Retorna el Plan de Ruta'
                                        );

 function FuncRetPlanruValue($schema)
 {
  $resultado = array();

  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> retRutasxContro($schema);

   if($resultado)
    return $resultado;
   else
    return $resultado[] = array ("contro" => "NO EXISTEN RELACIONES");
  }
  else
    return $resultado[] = array ("contro" => "ERROR DE LOGIN");
 }

 //Listado de PC

 $tiposRetPCValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("retPCValue",'complexType','struct','all','',$tiposRetPCValue);

 $tiposRetPCReturn = array(
        'contro' => array('name' => 'contro', 'type' => 'xsd:string'),
	'nombre' => array('name' => 'nombre', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('retPCReturn','complexType','array','all','',$tiposRetPCReturn);

 $server -> register("FuncRetPCValue",
    array("retPCValue" => "tns:retPCValue"),
    array("return"           => "tns:retPCReturn"),
    'urn:InterfazAplicaSAT',
    'urn:retPCReturnwsdl#retPCReturn',
    'rpc',
    'encoded',
    'Funci�n Que Retorna el Listado de PC'
                                        );

 function FuncRetPCValue($schema)
 {
  $resultado = array();

  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> retPC();

   if($resultado)
    return $resultado;
   else
    return $resultado[] = array ("contro" => "NO EXISTEN PC");
  }
  else
    return $resultado[] = array ("contro" => "ERROR DE LOGIN");
 }

 //Listado de Rutas

 $tiposRetRutasxValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string'),
        "ciuori"  => array('name' => "ciuori", 'type' => 'xsd:string'),
        "ciudes"  => array('name' => "ciudes", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("retRutasxValue",'complexType','struct','all','',$tiposRetRutasxValue);

 $tiposRetRutasxReturn = array(
        'rutasx' => array('name' => 'rutasx', 'type' => 'xsd:string'),
	'nombre' => array('name' => 'nombre', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('retRutasxReturn','complexType','array','all','',$tiposRetRutasxReturn);

 $server -> register("FuncRetRutasxGValue",
    array("retRutasxValue" => "tns:retRutasxValue"),
    array("return"           => "tns:retRutasxReturn"),
    'urn:InterfazAplicaSAT',
    'urn:retRutasxReturnwsdl#retRutasxReturn',
    'rpc',
    'encoded',
    'Funci�n Que Retorna el Listado de Rutas'
                                        );

 function FuncRetRutasxGValue($schema)
 {
  $resultado = array();

  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> retRutasx($schema["ciuori"],$schema["ciudes"]);

   if($resultado)
    return $resultado;
   else
    return $resultado[] = array ("rutasx" => "-2");
  }
  else
    return $resultado[] = array ("rutasx" => "-1");
 }

 //Listado de Novedades

 $tiposRetNovedaValue = array(
	"usuari"  => array('name' => "usuari", 'type' => 'xsd:string'),
        "passwo"  => array('name' => "passwo", 'type' => 'xsd:string'),
        "transp"  => array('name' => "transp", 'type' => 'xsd:string')
                          );

 $server -> wsdl -> addComplexType("retNovedaValue",'complexType','struct','all','',$tiposRetNovedaValue);

 $tiposRetNovedaReturn = array(
        'noveda' => array('name' => 'noveda', 'type' => 'xsd:string'),
	'nombre' => array('name' => 'nombre', 'type' => 'xsd:string'),
	'tiempo' => array('name' => 'tiempo', 'type' => 'xsd:string'),
	'alarma' => array('name' => 'alarma', 'type' => 'xsd:string')
                             );

 $server -> wsdl -> addComplexType('retNovedaReturn','complexType','array','all','',$tiposRetNovedaReturn);

 $server -> register("FuncRetNovedaValue",
    array("retNovedaValue" => "tns:retNovedaValue"),
    array("return"           => "tns:retNovedaReturn"),
    'urn:InterfazAplicaSAT',
    'urn:retNovedaReturnwsdl#retNovedaReturn',
    'rpc',
    'encoded',
    'Funci�n Que Retorna el Listado de Novedades'
                                        );

 function FuncRetNovedaValue($schema)
 {
  $resultado = array();

  $interf_sat = new Interfaz_SAT_client();

  if($interf_sat -> Inicializar_client($schema["transp"],$schema["usuari"],$schema["passwo"]))
  {
   $resultado = $interf_sat -> retNoveda();

   if($resultado)
    return $resultado;
   else
    return $resultado[] = array ("contro" => "NO EXISTEN NOVEDADES");
  }
  else
    return $resultado[] = array ("contro" => "ERROR DE LOGIN");
 }

 $HTTP_RAW_POST_DATA = isset($HTTP_RAW_POST_DATA) ? $HTTP_RAW_POST_DATA : '';
 $server->service($HTTP_RAW_POST_DATA);
?>
